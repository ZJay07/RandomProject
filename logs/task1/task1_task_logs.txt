Underlying weight vector w_true:
tensor([-0.2182,  0.2130, -0.2076,  0.2020, -0.1963,  0.1905, -0.1844,  0.1782,
        -0.1717,  0.1650, -0.1579,  0.1506, -0.1429,  0.1347, -0.1260,  0.1166,
        -0.1065,  0.0952, -0.0825,  0.0673, -0.0476])
Training set x_train shape: torch.Size([200, 5])
Training set t_train shape: torch.Size([200])
Test set x_test shape: torch.Size([100, 5])
Test set t_test shape: torch.Size([100])

 --------------------------------------------------
Using loss function: MyCrossEntropy
--------------------------------------------------
Training with polynomial order M = 1
Epoch: 0, Loss: 2.1651649475097656
Epoch: 10, Loss: 2.2488837242126465
Epoch: 20, Loss: 3.2901177406311035
Epoch: 30, Loss: 3.9406790733337402
Epoch: 40, Loss: 2.4404232501983643
Epoch: 50, Loss: 2.612185478210449
Epoch: 60, Loss: 1.6527812480926514
Epoch: 70, Loss: 0.5620086193084717
Epoch: 80, Loss: 1.9450074434280396
Epoch: 90, Loss: 2.668134927749634
Optimized weight vector (first 5 elements): tensor([-0.5467,  0.3556,  0.4561,  1.3433,  0.0778])
Train predictions (first 10): tensor([1.5374e-01, 9.8925e-01, 9.5544e-01, 8.5545e-04, 9.8752e-01, 1.4818e-02,
        9.4396e-01, 9.9897e-01, 9.2601e-01, 2.0542e-03])
Test predictions (first 10): tensor([1.1612e-02, 6.0668e-01, 1.8662e-02, 1.4180e-02, 9.9969e-01, 2.2503e-01,
        5.3567e-04, 9.9872e-01, 8.3402e-01, 9.4928e-01])
Other metric appropriate for classificationn task: Accuracy
Accuracy measures the proportion of correct predictions. It is intuitive, widely used for classification tasks, and effectively evaluates how well our logistic regression model assigns binary labels.

 --------------------------------------------------
Accuracy analysis:
Model prediction accuracy on training set: 62.00%
Observed training data accuracy: 64.00%
Comment: Model accuracy indicates how well the fitted model recovers the true classes, while observed accuracy shows the impact of label noise on training labels. A large gap suggests significant noise.
--------------------------------------------------
Training with polynomial order M = 2
Epoch: 0, Loss: 10.971542358398438
Epoch: 10, Loss: 7.217355728149414
Epoch: 20, Loss: 13.304479598999023
Epoch: 30, Loss: 4.461548805236816
Epoch: 40, Loss: 6.062095642089844
Epoch: 50, Loss: 4.349515914916992
Epoch: 60, Loss: 5.271614074707031
Epoch: 70, Loss: 8.015127182006836
Epoch: 80, Loss: 8.64684772491455
Epoch: 90, Loss: 1.9964113235473633
Optimized weight vector (first 5 elements): tensor([ 0.0124, -1.0919,  1.1325, -0.2373,  0.2133])
Train predictions (first 10): tensor([7.8536e-01, 1.5061e-12, 1.0000e+00, 8.0185e-12, 6.1084e-22, 3.4947e-13,
        7.3075e-09, 1.4785e-07, 2.6605e-16, 1.0000e+00])
Test predictions (first 10): tensor([9.8510e-01, 1.0000e+00, 5.2646e-04, 8.6324e-01, 9.9996e-01, 5.6593e-12,
        1.0000e+00, 9.9995e-01, 6.2523e-13, 8.4862e-11])
Other metric appropriate for classificationn task: Accuracy
Accuracy measures the proportion of correct predictions. It is intuitive, widely used for classification tasks, and effectively evaluates how well our logistic regression model assigns binary labels.

 --------------------------------------------------
Accuracy analysis:
Model prediction accuracy on training set: 42.00%
Observed training data accuracy: 64.00%
Comment: Model accuracy indicates how well the fitted model recovers the true classes, while observed accuracy shows the impact of label noise on training labels. A large gap suggests significant noise.
--------------------------------------------------
Training with polynomial order M = 3
Epoch: 0, Loss: 7.993155479431152
Epoch: 10, Loss: 8.037083625793457
Epoch: 20, Loss: 8.05904769897461
Epoch: 30, Loss: 4.007559776306152
Epoch: 40, Loss: 7.971192359924316
Epoch: 50, Loss: 10.053569793701172
Epoch: 60, Loss: 8.015119552612305
Epoch: 70, Loss: 8.015119552612305
Epoch: 80, Loss: 12.022679328918457
Epoch: 90, Loss: 8.03712272644043
Optimized weight vector (first 5 elements): tensor([ 0.9942, -0.0954,  0.6413, -0.4769,  0.5433])
Train predictions (first 10): tensor([1., 0., 1., 1., 1., 1., 1., 1., 1., 0.])
Test predictions (first 10): tensor([0.0000e+00, 9.9992e-01, 5.1564e-32, 0.0000e+00, 1.0000e+00, 1.0000e+00,
        0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00])
Other metric appropriate for classificationn task: Accuracy
Accuracy measures the proportion of correct predictions. It is intuitive, widely used for classification tasks, and effectively evaluates how well our logistic regression model assigns binary labels.

 --------------------------------------------------
Accuracy analysis:
Model prediction accuracy on training set: 56.50%
Observed training data accuracy: 64.00%
Comment: Model accuracy indicates how well the fitted model recovers the true classes, while observed accuracy shows the impact of label noise on training labels. A large gap suggests significant noise.

 --------------------------------------------------
Using loss function: MyRootMeanSquare
--------------------------------------------------
Training with polynomial order M = 1
Epoch: 0, Loss: 0.6534954905509949
Epoch: 10, Loss: 0.50020831823349
Epoch: 20, Loss: 0.7063204646110535
Epoch: 30, Loss: 0.6125696301460266
Epoch: 40, Loss: 0.7802020311355591
Epoch: 50, Loss: 0.8211568593978882
Epoch: 60, Loss: 0.7255069613456726
Epoch: 70, Loss: 0.5493474006652832
Epoch: 80, Loss: 0.6877217292785645
Epoch: 90, Loss: 0.7086948752403259
Optimized weight vector (first 5 elements): tensor([ 0.5022, -0.9425, -0.7978,  0.4565,  2.6010])
Train predictions (first 10): tensor([9.4560e-01, 1.0000e+00, 2.1578e-01, 1.0837e-05, 1.3922e-05, 1.5308e-02,
        9.9993e-01, 3.2370e-04, 9.1819e-01, 1.0000e+00])
Test predictions (first 10): tensor([5.0368e-04, 7.6339e-01, 7.8979e-01, 9.9999e-01, 3.9789e-02, 1.4206e-05,
        2.4704e-05, 1.0000e+00, 9.9999e-01, 9.9918e-01])
Other metric appropriate for classificationn task: Accuracy
Accuracy measures the proportion of correct predictions. It is intuitive, widely used for classification tasks, and effectively evaluates how well our logistic regression model assigns binary labels.

 --------------------------------------------------
Accuracy analysis:
Model prediction accuracy on training set: 41.00%
Observed training data accuracy: 64.00%
Comment: Model accuracy indicates how well the fitted model recovers the true classes, while observed accuracy shows the impact of label noise on training labels. A large gap suggests significant noise.
--------------------------------------------------
Training with polynomial order M = 2
Epoch: 0, Loss: 0.6090764403343201
Epoch: 10, Loss: 0.6123723983764648
Epoch: 20, Loss: 0.788682222366333
Epoch: 30, Loss: 0.8473549485206604
Epoch: 40, Loss: 0.6759597063064575
Epoch: 50, Loss: 0.5258217453956604
Epoch: 60, Loss: 0.5046751499176025
Epoch: 70, Loss: 0.6129266023635864
Epoch: 80, Loss: 0.4604955315589905
Epoch: 90, Loss: 0.7525577545166016
Optimized weight vector (first 5 elements): tensor([-0.0672, -0.2426,  2.3427,  1.7030,  0.2552])
Train predictions (first 10): tensor([5.6278e-05, 1.0000e+00, 5.9232e-15, 1.0000e+00, 1.1892e-19, 1.0000e+00,
        1.0000e+00, 9.9878e-01, 5.4103e-05, 1.0000e+00])
Test predictions (first 10): tensor([1.0000e+00, 1.7150e-02, 3.3440e-08, 2.3359e-05, 1.0000e+00, 9.9929e-01,
        3.2519e-30, 1.0000e+00, 1.3827e-08, 1.0000e+00])
Other metric appropriate for classificationn task: Accuracy
Accuracy measures the proportion of correct predictions. It is intuitive, widely used for classification tasks, and effectively evaluates how well our logistic regression model assigns binary labels.

 --------------------------------------------------
Accuracy analysis:
Model prediction accuracy on training set: 46.50%
Observed training data accuracy: 64.00%
Comment: Model accuracy indicates how well the fitted model recovers the true classes, while observed accuracy shows the impact of label noise on training labels. A large gap suggests significant noise.
--------------------------------------------------
Training with polynomial order M = 3
Epoch: 0, Loss: 0.5102272629737854
Epoch: 10, Loss: 0.7071067690849304
Epoch: 20, Loss: 0.8660253882408142
Epoch: 30, Loss: 0.3535533845424652
Epoch: 40, Loss: 0.6123724579811096
Epoch: 50, Loss: 0.7905694246292114
Epoch: 60, Loss: 0.9354143738746643
Epoch: 70, Loss: 0.7905694246292114
Epoch: 80, Loss: 0.7905694246292114
Epoch: 90, Loss: 0.7071067690849304
Optimized weight vector (first 5 elements): tensor([ 0.9860,  0.2950, -1.7311, -0.5438,  0.9449])
Train predictions (first 10): tensor([1.0000e+00, 1.0000e+00, 1.9149e-23, 0.0000e+00, 0.0000e+00, 1.0000e+00,
        1.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00])
Test predictions (first 10): tensor([0.0000e+00, 3.5804e-03, 9.9969e-01, 9.9981e-33, 1.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 4.1004e-22, 1.0000e+00])
Other metric appropriate for classificationn task: Accuracy
Accuracy measures the proportion of correct predictions. It is intuitive, widely used for classification tasks, and effectively evaluates how well our logistic regression model assigns binary labels.

 --------------------------------------------------
Accuracy analysis:
Model prediction accuracy on training set: 46.00%
Observed training data accuracy: 64.00%
Comment: Model accuracy indicates how well the fitted model recovers the true classes, while observed accuracy shows the impact of label noise on training labels. A large gap suggests significant noise.